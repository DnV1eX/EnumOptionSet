//
//  EnumOptionSet.swift
//  EnumOptionSet
//
//  Created by Alexey Demin on 2024-12-09.
//  Copyright © 2024 DnV1eX. All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//

/// Macro to declare option set using an enumeration notation.
///
/// Usage example:
///
///     @EnumOptionSet<Int8>
///     enum ShippingOption: Int {
///         case nextDay, secondDay, priority = 3, standard
///     }
///
/// - Parameters:
///   - rawValueType: The raw value type of the generated option set. Defaults to `Int`.
///   - checkOverflow: The flag to enable raw value overflow check. Defaults to `true`.
///   - generateDescription: The flag to generate `description` and `debugDescription`. Defaults to `true`.
@attached(member, names: named(Set))
public macro EnumOptionSet<RawValue: FixedWidthInteger>(checkOverflow: Bool = true, generateDescription: Bool = true) = #externalMacro(module: "EnumOptionSetMacros", type: "EnumOptionSetMacro")

/// Macro to declare option set using an enumeration notation.
///
/// Usage example:
///
///     @EnumOptionSet<Int8>
///     enum ShippingOption: Int {
///         case nextDay, secondDay, priority = 3, standard
///     }
///
/// - Parameters:
///   - rawValueType: The raw value type of the generated option set. Defaults to `Int`.
///   - checkOverflow: The flag to enable raw value overflow check. Defaults to `true`.
///   - generateDescription: The flag to generate `description` and `debugDescription`. Defaults to `true`.
@attached(member, names: named(Set))
public macro EnumOptionSet<RawValue: FixedWidthInteger>(_ rawValueType: RawValue.Type = Int.self, checkOverflow: Bool = true, generateDescription: Bool = true) = #externalMacro(module: "EnumOptionSetMacros", type: "EnumOptionSetMacro")

extension FixedWidthInteger {
    /// The number’s binary representation, split into 8-bit chunks.
    ///
    /// It is used to produce the `debugDescription` of an option set generated by the `@EnumOptionSet` macro.
    ///
    /// [Source](https://developer.apple.com/documentation/swift/fixedwidthinteger#overview)
    public var binaryString: String {
        var result: [String] = []
        for i in 0..<(Self.bitWidth / 8) {
            let byte = UInt8(truncatingIfNeeded: self >> (i * 8))
            let byteString = String(byte, radix: 2)
            let padding = String(repeating: "0",
                                 count: 8 - byteString.count)
            result.append(padding + byteString)
        }
        return "0b" + result.reversed().joined(separator: "_")
    }
}

extension OptionSet {
    /// Accessing options as boolean flags using subscript notation.
    ///
    /// Examples:
    /// 
    ///     optionSet[.someOption] = true
    ///     optionSet[.someOption].toggle()
    ///     optionSet[.someOption] = optionSet[.otherOption]
    ///
    /// - Parameter flag: The option set element being accessed.
    /// - Returns: `true` if option set contains the element, or `false` otherwise.
    public subscript(flag: Element) -> Bool {
        get {
            contains(flag)
        }
        set {
            if newValue {
                insert(flag)
            } else {
                remove(flag)
            }
        }
    }
}
